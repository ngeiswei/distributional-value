/*
 * Copyright (C) 2018 SingularityNet
 * All Rights Reserved
 *
 * Written by Roman Treutlein <roman@singularitynet.io>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>
#include <iomanip>

#include <opencog/distvalue/CoverTree.h>
#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

class CoverTreeTest :  public CxxTest::TestSuite
{
	CoverTree<double> ct;
public:
	CoverTreeTest() {}

	void setUp()
	{
		ct = CoverTree<double>(1);
		ct.insert(DVec{0.1},1);
		ct.insert(DVec{0.2},1);
		ct.insert(DVec{0.3},3);
		ct.insert(DVec{0.4},1);
		ct.insert(DVec{0.5},1);
	}

	void tearDown() {}

	void testIsValid()
	{
		TS_ASSERT_EQUALS(ct.is_valid(),true);
	}

	void testGet()
	{
		TS_ASSERT_EQUALS(ct.get(DVec{0.1}),1)
		TS_ASSERT_EQUALS(ct.get(DVec{0.2}),1)
		TS_ASSERT_EQUALS(ct.get(DVec{0.3}),3)
		TS_ASSERT_EQUALS(ct.get(DVec{0.4}),1)
		TS_ASSERT_EQUALS(ct.get(DVec{0.5}),1)
	}

	void testNearestNeighbor()
	{
		const CoverTreeNode<double> * res1 = ct.findNearestNeighbor(DVec{0.41});
		const CoverTreeNode<double> * res2 = ct.findNearestNeighbor(DVec{0.39});
		const CoverTreeNode<double> * res3 = ct.findNearestNeighbor(DVec{0.25});

		TS_ASSERT_EQUALS(res1->pos,DVec{0.4});
		TS_ASSERT_EQUALS(res2->pos,DVec{0.4});
		TS_ASSERT_EQUALS(res3->pos,DVec{0.3});
	}

	/*
	 * Insert Order does lead to a differently structured Tree
	 * but it should still be considered equal.
	 */
	void testComparison()
	{
		CoverTree<double> ct2 = CoverTree<double>(1);
		ct2.insert(DVec{0.5},1);
		ct2.insert(DVec{0.4},1);
		ct2.insert(DVec{0.3},3);
		ct2.insert(DVec{0.2},1);
		ct2.insert(DVec{0.1},1);

		TS_ASSERT_EQUALS(ct,ct2);
	}
};
